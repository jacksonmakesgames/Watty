Installation:

	Tools:
		Windows:
		   Install CMAKE
				https://cmake.org/download/
			

		Linux (debian):
		   Install CMAKE	
				sudo apt-get install cmake
		   Install GL tools:
				sudo apt-get install xorg-dev libglu1-mesa-dev
		   Get submodules:
				git submodule foreach --recursive 'git checkout watty'
				git submodule update --init
				git submodule update --remote
				git submodule foreach --recursive 'git reset --hard'

		
	Watty:
		git clone https://github.com/jacksonmakesgames/Watty.git
		cd Watty







--Building from source--
	Windows:
		
		
		Create a "build" folder
		
		
		
		To create Visual Studio Solution, run "cmake .." from the "build" folder

		For Emscripten, 
		    activate the Emscripten env                                 (On windows, launch emcmdpromp.bat)
		    navigate to embuild                                         (Watty/embuild)
		    emcmake cmake -DEMSCRIPTEN=TRUE -G "Unix Makefiles" ..      (Generates Makefiles and configures them for Emscripten)
		    make                                                        (Compiles *.c* -> LLVM Bitcode -> Javascript and then links)

		    NOTE: if emcmake doesn't work, try running test.bat/test.py in dependencies/emscripten. Also check everything is on PATH

		Note that Box2D requires a different javascript version, so we have to link against dependencies/box2d.js

		Resources:
		In your CMakeLists.txt:
		include(tools/functions.cmake)
		create_resources("${CMAKE_CURRENT_SOURCE_DIR}/res" OFF)
		include_directories("${CMAKE_CURRENT_SOURCE_DIR}/res")

		...Where "res" is the name of your resource directory

		Resources are converted to C++ arrays when CMake is run. The function for converting files to C++ arrays is in tools/functions.cmake.
		The C++ arrays are compiled into an object library which is then linked with the final executable.
		Watty-Core also has it's own resources, which are linked with the Core static library.

		For now, you *MUST* include res.h before your init function (res.h which declares the auto-generated class containing your resources).
		Before using resources, call RawResources::Init(). This creates a std::vector that your can use to access your resources.

		Resources::Load("filepath-relative-to-your-resource-dir") will get you a Resource object, containing the data (as a byte array) and the size of the data (as an unsigned int)
	Linux:
	  From the Watty/ root directory:
		mkdir "build" && cd build
		cmake ..
		make
